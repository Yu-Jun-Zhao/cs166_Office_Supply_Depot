***************************** DATABASE ******************************

Create table User (username VARCHAR(45) PRIMARY KEY, firstName varchar(45), lastname varchar(45), address VARCHAR(45), cardNumber VARCHAR(17))
Create table Product (productID INT PRIMARY KEY AUTO_INCREMENT, pName VARCHAR(255), quantity INT, price DOUBLE, weight DOUBLE)
// EVERY ACCOUNT HAS A PRE-DEFINED CART NUMBER. EVERY TIME USER ADDS A PRODUCT TO CART, CARTID DOES NOT CHANGE
// ONCE USER COMPLETED ORDER, CARTID WILL BE INCREMENTED FOR NEXT TIME USE
Create table Cart (cartID INT NOT NULL, username VARCHAR(45), productID INT, quantity INT,
FOREIGN KEY(productID) REFERENCES product(productID),FOREIGN KEY(username) REFERENCES User(username))

Create table Orders (orderID INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(45), cartID INT, date TIMESTAMP,
FOREIGN KEY(username) REFERENCES User(username), FOREIGN KEY(cartID) REFERENCES Cart(cartID))



********************************* CODE ***********************************
// add a product
app.post("/products/add", (req, res) => {
  console.log(req.body);
  const {pName, quantity, price, weight} = req.body;
  console.log(pName, quantity, price, weight);
  const insert_product = `INSERT into product (pName, quantity, price, weight) values('${pName}', '${quantity}', '${price}', '${weight}')`;
  console.log(insert_product);

  connection.query(insert_product, (error, results) => {
    if(err)
        return res.send(err)
    else   
        return res.send('successfully added product')
  }); 
});

// update product
app.put("/products/update/:productID", (req, res) => {
  const { productID } = req.params;
  console.log(req.body);
  const {pName, quantity, price, weight} = req.body;
  console.log(pName, quantity, price, weight);
  const update_product = `UPDATE product set pName = '${pName}', quantity = '${quantity}', price = '${price}', weight = '${weight}' WHERE productID = '${productID}'`;
  console.log(update_product);

  connection.query(update_product, (error, results) => {
    if(err)
        return res.send({
          success: false,
          msg: String(error)
        })
    else   
        return res.send({
          success: true,
          msg: 'Successfully updated'
        })
  }); 
});

// add items to a cart: create a cart and add each row (each item) to that cartID
// we need to get the cartID first which is created by user
app.post("/products/cart", (req, res) => {
  console.log(req.body);
  const {cartID, date, productID, quantity} = req.body;
  console.log(cartID, date, productID, quantity);
  const insert_cart = `INSERT into Cart (cartID, date, productID, quantity) values('${cartID}', '${date}', '${productID}', '${quantity}')`;
  console.log(insert_cart);

  connection.query(insert_cart, (error, results) => {
    if(err)
        return res.send(err)
    else   
        return res.send('successfully added an item to cart')
  }); 
});




******************* CONNECTION ****************************************



// server
const mysql =require('mysql');
const express =require('express');
var app = express();
const bodyparser =require('body-parser');

app.use(bodyparser.json());

var mysqlConnection = mysql.createConnection({
    host:'localhost',
    user: 'root',
    password: '.....',
    database: 'office_depot'
});

mysqlConnection.connect((err)=> {
    if(!err)
        console.log('DB connection succeded.');
    else
        console.log('DB connection failed \n Error: ' + JSON.stringify(err,undefined, 2));       
});

app.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
  });

app.listen(4000, ()=>console.log('Express server is running at port no: 4000'));

const show_Users = `Select * from userinfo`;
app.get('/users', (req, res)=>{
    mysqlConnection.query(show_Users, (err, results)=>{
        if(err)
            return res.send(err)
        else {
            return res.json({
                data: results})
        }
    });
});

app.post('/users/add', (req, res) => {
    console.log(req.body);
    const {username, pwd, isAdmin} = req.body;
    console.log(username, pwd, isAdmin);
    const insert_User = `INSERT into userinfo (username, pwd, isAdmin) values('${username}', '${pwd}', ${isAdmin})`;
    console.log(insert_User);
    mysqlConnection.query(insert_User, (err, results) =>{
        if(err)
            return res.send(err)
        else   
            return res.send('successfully added user')
    });
});




///////////////////////////////// client
import React, { Component } from 'react';

// Main app
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      password: '',
      users: []
    };
    this.handleChangeusername = this.handleChangeusername.bind(this);
    this.handleChangepassword = this.handleChangepassword.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  componentDidMount() {
    this.getUsers();
  }
  getUsers = _=>{
    fetch('http://localhost:4000/users')
    .then(response => response.json())
    .then(response => this.setState({ users: response.data}))
    .catch(err => console.error(err))
  }

  postUsers = _=>{
    fetch('http://localhost:4000/users/add',{
      method: 'POST',
      headers: {
        "Content-Type": "application/json",
        // "Content-Type": "application/x-www-form-urlencoded",
    },
      body: JSON.stringify({
        username: this.state.username,
        pwd: this.state.password,
        isAdmin: false
      }),
    })
    .then(response => response.json())
    .catch(err => console.error(err))
  }


  renderUser = ({username}) => <div key={username}>{username}</div>

  handleChangeusername(event) {
    this.setState({'username': event.target.value});
  }
  handleChangepassword(event) {
    this.setState({'password': event.target.value});
  }
  handleSubmit(event) {
    event.preventDefault();
    console.log(this.state);
    this.postUsers();
    this.getUsers();
  }

  render() {
    const { users } = this.state;
    return(
      <div>
      <div>
      {users.map(this.renderUser)}
      </div>
              <form onSubmit= {this.handleSubmit}>
                  <label>
                    Username:
                    <input type="text" value={this.state.username} onChange={this.handleChangeusername} name='username' />
                  </label>
                  <label>
                  Password:
                  <input type="text" value={this.state.password} onChange={this.handleChangepassword} name='password'/>
                </label>
                <input type='submit' value='Sign In'/>
              </form>
      </div>
    )
  }
}
export default App;
